// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coord.proto
#ifndef GRPC_coord_2eproto__INCLUDED
#define GRPC_coord_2eproto__INCLUDED

#include "coord.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace coord {

class SNSCoordinator final {
 public:
  static constexpr char const* service_full_name() {
    return "coord.SNSCoordinator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ClientLogin(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::coord::ClientReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>> AsyncClientLogin(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>>(AsyncClientLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>> PrepareAsyncClientLogin(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>>(PrepareAsyncClientLoginRaw(context, request, cq));
    }
    // Bidirectional Communication to check on server interaction
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::coord::HeartBeat, ::coord::HeartBeat>> ServerCommunicate(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::coord::HeartBeat, ::coord::HeartBeat>>(ServerCommunicateRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::coord::HeartBeat, ::coord::HeartBeat>> AsyncServerCommunicate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::coord::HeartBeat, ::coord::HeartBeat>>(AsyncServerCommunicateRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::coord::HeartBeat, ::coord::HeartBeat>> PrepareAsyncServerCommunicate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::coord::HeartBeat, ::coord::HeartBeat>>(PrepareAsyncServerCommunicateRaw(context, cq));
    }
    virtual ::grpc::Status GetSlave(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::coord::ClientReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>> AsyncGetSlave(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>>(AsyncGetSlaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>> PrepareAsyncGetSlave(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>>(PrepareAsyncGetSlaveRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFsync(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::coord::ClientReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>> AsyncGetFsync(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>>(AsyncGetFsyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>> PrepareAsyncGetFsync(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>>(PrepareAsyncGetFsyncRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ClientLogin(::grpc::ClientContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClientLogin(::grpc::ClientContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Bidirectional Communication to check on server interaction
      virtual void ServerCommunicate(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::coord::HeartBeat,::coord::HeartBeat>* reactor) = 0;
      virtual void GetSlave(::grpc::ClientContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSlave(::grpc::ClientContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFsync(::grpc::ClientContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFsync(::grpc::ClientContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>* AsyncClientLoginRaw(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>* PrepareAsyncClientLoginRaw(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::coord::HeartBeat, ::coord::HeartBeat>* ServerCommunicateRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::coord::HeartBeat, ::coord::HeartBeat>* AsyncServerCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::coord::HeartBeat, ::coord::HeartBeat>* PrepareAsyncServerCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>* AsyncGetSlaveRaw(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>* PrepareAsyncGetSlaveRaw(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>* AsyncGetFsyncRaw(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coord::ClientReply>* PrepareAsyncGetFsyncRaw(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ClientLogin(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::coord::ClientReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>> AsyncClientLogin(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>>(AsyncClientLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>> PrepareAsyncClientLogin(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>>(PrepareAsyncClientLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>> ServerCommunicate(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>>(ServerCommunicateRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>> AsyncServerCommunicate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>>(AsyncServerCommunicateRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>> PrepareAsyncServerCommunicate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>>(PrepareAsyncServerCommunicateRaw(context, cq));
    }
    ::grpc::Status GetSlave(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::coord::ClientReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>> AsyncGetSlave(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>>(AsyncGetSlaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>> PrepareAsyncGetSlave(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>>(PrepareAsyncGetSlaveRaw(context, request, cq));
    }
    ::grpc::Status GetFsync(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::coord::ClientReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>> AsyncGetFsync(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>>(AsyncGetFsyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>> PrepareAsyncGetFsync(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>>(PrepareAsyncGetFsyncRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ClientLogin(::grpc::ClientContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response, std::function<void(::grpc::Status)>) override;
      void ClientLogin(::grpc::ClientContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerCommunicate(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::coord::HeartBeat,::coord::HeartBeat>* reactor) override;
      void GetSlave(::grpc::ClientContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response, std::function<void(::grpc::Status)>) override;
      void GetSlave(::grpc::ClientContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFsync(::grpc::ClientContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response, std::function<void(::grpc::Status)>) override;
      void GetFsync(::grpc::ClientContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>* AsyncClientLoginRaw(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>* PrepareAsyncClientLoginRaw(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>* ServerCommunicateRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>* AsyncServerCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>* PrepareAsyncServerCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>* AsyncGetSlaveRaw(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>* PrepareAsyncGetSlaveRaw(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>* AsyncGetFsyncRaw(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coord::ClientReply>* PrepareAsyncGetFsyncRaw(::grpc::ClientContext* context, const ::coord::ClientRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ClientLogin_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerCommunicate_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSlave_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFsync_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ClientLogin(::grpc::ServerContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response);
    // Bidirectional Communication to check on server interaction
    virtual ::grpc::Status ServerCommunicate(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>* stream);
    virtual ::grpc::Status GetSlave(::grpc::ServerContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response);
    virtual ::grpc::Status GetFsync(::grpc::ServerContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ClientLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClientLogin() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ClientLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientLogin(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientLogin(::grpc::ServerContext* context, ::coord::ClientRequest* request, ::grpc::ServerAsyncResponseWriter< ::coord::ClientReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerCommunicate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ServerCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerCommunicate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSlave() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSlave(::grpc::ServerContext* context, ::coord::ClientRequest* request, ::grpc::ServerAsyncResponseWriter< ::coord::ClientReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFsync() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetFsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFsync(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFsync(::grpc::ServerContext* context, ::coord::ClientRequest* request, ::grpc::ServerAsyncResponseWriter< ::coord::ClientReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ClientLogin<WithAsyncMethod_ServerCommunicate<WithAsyncMethod_GetSlave<WithAsyncMethod_GetFsync<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ClientLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClientLogin() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::coord::ClientRequest, ::coord::ClientReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response) { return this->ClientLogin(context, request, response); }));}
    void SetMessageAllocatorFor_ClientLogin(
        ::grpc::MessageAllocator< ::coord::ClientRequest, ::coord::ClientReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::coord::ClientRequest, ::coord::ClientReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ClientLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientLogin(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClientLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerCommunicate() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::coord::HeartBeat, ::coord::HeartBeat>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ServerCommunicate(context); }));
    }
    ~WithCallbackMethod_ServerCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::coord::HeartBeat, ::coord::HeartBeat>* ServerCommunicate(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSlave() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::coord::ClientRequest, ::coord::ClientReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response) { return this->GetSlave(context, request, response); }));}
    void SetMessageAllocatorFor_GetSlave(
        ::grpc::MessageAllocator< ::coord::ClientRequest, ::coord::ClientReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::coord::ClientRequest, ::coord::ClientReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSlave(
      ::grpc::CallbackServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFsync() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::coord::ClientRequest, ::coord::ClientReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::coord::ClientRequest* request, ::coord::ClientReply* response) { return this->GetFsync(context, request, response); }));}
    void SetMessageAllocatorFor_GetFsync(
        ::grpc::MessageAllocator< ::coord::ClientRequest, ::coord::ClientReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::coord::ClientRequest, ::coord::ClientReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFsync(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFsync(
      ::grpc::CallbackServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ClientLogin<WithCallbackMethod_ServerCommunicate<WithCallbackMethod_GetSlave<WithCallbackMethod_GetFsync<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ClientLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClientLogin() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ClientLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientLogin(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerCommunicate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ServerCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSlave() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFsync() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetFsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFsync(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClientLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClientLogin() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ClientLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientLogin(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerCommunicate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ServerCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerCommunicate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSlave() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSlave(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFsync() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetFsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFsync(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFsync(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClientLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClientLogin() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClientLogin(context, request, response); }));
    }
    ~WithRawCallbackMethod_ClientLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientLogin(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClientLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerCommunicate() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ServerCommunicate(context); }));
    }
    ~WithRawCallbackMethod_ServerCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::coord::HeartBeat, ::coord::HeartBeat>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ServerCommunicate(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSlave() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSlave(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSlave(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFsync() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFsync(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFsync(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFsync(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClientLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClientLogin() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::coord::ClientRequest, ::coord::ClientReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::coord::ClientRequest, ::coord::ClientReply>* streamer) {
                       return this->StreamedClientLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClientLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClientLogin(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClientLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::coord::ClientRequest,::coord::ClientReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSlave() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::coord::ClientRequest, ::coord::ClientReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::coord::ClientRequest, ::coord::ClientReply>* streamer) {
                       return this->StreamedGetSlave(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSlave(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::coord::ClientRequest,::coord::ClientReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFsync() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::coord::ClientRequest, ::coord::ClientReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::coord::ClientRequest, ::coord::ClientReply>* streamer) {
                       return this->StreamedGetFsync(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFsync(::grpc::ServerContext* /*context*/, const ::coord::ClientRequest* /*request*/, ::coord::ClientReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFsync(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::coord::ClientRequest,::coord::ClientReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ClientLogin<WithStreamedUnaryMethod_GetSlave<WithStreamedUnaryMethod_GetFsync<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ClientLogin<WithStreamedUnaryMethod_GetSlave<WithStreamedUnaryMethod_GetFsync<Service > > > StreamedService;
};

}  // namespace coord


#endif  // GRPC_coord_2eproto__INCLUDED
