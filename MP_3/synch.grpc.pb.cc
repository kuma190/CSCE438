// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: synch.proto

#include "synch.pb.h"
#include "synch.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace synch {

static const char* SNSSynchronizer_method_names[] = {
  "/synch.SNSSynchronizer/newFollow",
  "/synch.SNSSynchronizer/newUsers",
  "/synch.SNSSynchronizer/newPost",
};

std::unique_ptr< SNSSynchronizer::Stub> SNSSynchronizer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SNSSynchronizer::Stub> stub(new SNSSynchronizer::Stub(channel, options));
  return stub;
}

SNSSynchronizer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_newFollow_(SNSSynchronizer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_newUsers_(SNSSynchronizer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_newPost_(SNSSynchronizer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SNSSynchronizer::Stub::newFollow(::grpc::ClientContext* context, const ::synch::syncReq& request, ::synch::syncRep* response) {
  return ::grpc::internal::BlockingUnaryCall< ::synch::syncReq, ::synch::syncRep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_newFollow_, context, request, response);
}

void SNSSynchronizer::Stub::async::newFollow(::grpc::ClientContext* context, const ::synch::syncReq* request, ::synch::syncRep* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::synch::syncReq, ::synch::syncRep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_newFollow_, context, request, response, std::move(f));
}

void SNSSynchronizer::Stub::async::newFollow(::grpc::ClientContext* context, const ::synch::syncReq* request, ::synch::syncRep* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_newFollow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::synch::syncRep>* SNSSynchronizer::Stub::PrepareAsyncnewFollowRaw(::grpc::ClientContext* context, const ::synch::syncReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::synch::syncRep, ::synch::syncReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_newFollow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::synch::syncRep>* SNSSynchronizer::Stub::AsyncnewFollowRaw(::grpc::ClientContext* context, const ::synch::syncReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnewFollowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSSynchronizer::Stub::newUsers(::grpc::ClientContext* context, const ::synch::syncReq& request, ::synch::syncRep* response) {
  return ::grpc::internal::BlockingUnaryCall< ::synch::syncReq, ::synch::syncRep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_newUsers_, context, request, response);
}

void SNSSynchronizer::Stub::async::newUsers(::grpc::ClientContext* context, const ::synch::syncReq* request, ::synch::syncRep* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::synch::syncReq, ::synch::syncRep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_newUsers_, context, request, response, std::move(f));
}

void SNSSynchronizer::Stub::async::newUsers(::grpc::ClientContext* context, const ::synch::syncReq* request, ::synch::syncRep* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_newUsers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::synch::syncRep>* SNSSynchronizer::Stub::PrepareAsyncnewUsersRaw(::grpc::ClientContext* context, const ::synch::syncReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::synch::syncRep, ::synch::syncReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_newUsers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::synch::syncRep>* SNSSynchronizer::Stub::AsyncnewUsersRaw(::grpc::ClientContext* context, const ::synch::syncReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnewUsersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSSynchronizer::Stub::newPost(::grpc::ClientContext* context, const ::synch::Message& request, ::synch::syncRep* response) {
  return ::grpc::internal::BlockingUnaryCall< ::synch::Message, ::synch::syncRep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_newPost_, context, request, response);
}

void SNSSynchronizer::Stub::async::newPost(::grpc::ClientContext* context, const ::synch::Message* request, ::synch::syncRep* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::synch::Message, ::synch::syncRep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_newPost_, context, request, response, std::move(f));
}

void SNSSynchronizer::Stub::async::newPost(::grpc::ClientContext* context, const ::synch::Message* request, ::synch::syncRep* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_newPost_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::synch::syncRep>* SNSSynchronizer::Stub::PrepareAsyncnewPostRaw(::grpc::ClientContext* context, const ::synch::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::synch::syncRep, ::synch::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_newPost_, context, request);
}

::grpc::ClientAsyncResponseReader< ::synch::syncRep>* SNSSynchronizer::Stub::AsyncnewPostRaw(::grpc::ClientContext* context, const ::synch::Message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnewPostRaw(context, request, cq);
  result->StartCall();
  return result;
}

SNSSynchronizer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSSynchronizer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSSynchronizer::Service, ::synch::syncReq, ::synch::syncRep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSSynchronizer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::synch::syncReq* req,
             ::synch::syncRep* resp) {
               return service->newFollow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSSynchronizer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSSynchronizer::Service, ::synch::syncReq, ::synch::syncRep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSSynchronizer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::synch::syncReq* req,
             ::synch::syncRep* resp) {
               return service->newUsers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSSynchronizer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSSynchronizer::Service, ::synch::Message, ::synch::syncRep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSSynchronizer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::synch::Message* req,
             ::synch::syncRep* resp) {
               return service->newPost(ctx, req, resp);
             }, this)));
}

SNSSynchronizer::Service::~Service() {
}

::grpc::Status SNSSynchronizer::Service::newFollow(::grpc::ServerContext* context, const ::synch::syncReq* request, ::synch::syncRep* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSSynchronizer::Service::newUsers(::grpc::ServerContext* context, const ::synch::syncReq* request, ::synch::syncRep* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSSynchronizer::Service::newPost(::grpc::ServerContext* context, const ::synch::Message* request, ::synch::syncRep* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace synch

